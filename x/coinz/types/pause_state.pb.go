// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: demo/coinz/pause_state.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PauseState represents the modules pause state. The PauseState can only be updated by the Admin.
// If the PauseState is true then minting and burning are disabled.
// The PauseState MUST be initialized at genesis because there is no way to initialize the PauseState after the
// chain starts.
type PauseState struct {
	Paused bool `protobuf:"varint,1,opt,name=paused,proto3" json:"paused"`
}

func (m *PauseState) Reset()         { *m = PauseState{} }
func (m *PauseState) String() string { return proto.CompactTextString(m) }
func (*PauseState) ProtoMessage()    {}
func (*PauseState) Descriptor() ([]byte, []int) {
	return fileDescriptor_03ba814249a3011b, []int{0}
}
func (m *PauseState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseState.Merge(m, src)
}
func (m *PauseState) XXX_Size() int {
	return m.Size()
}
func (m *PauseState) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseState.DiscardUnknown(m)
}

var xxx_messageInfo_PauseState proto.InternalMessageInfo

func (m *PauseState) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func init() {
	proto.RegisterType((*PauseState)(nil), "demo.coinz.PauseState")
}

func init() { proto.RegisterFile("demo/coinz/pause_state.proto", fileDescriptor_03ba814249a3011b) }

var fileDescriptor_03ba814249a3011b = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x49, 0xcd, 0xcd,
	0xd7, 0x4f, 0xce, 0xcf, 0xcc, 0xab, 0xd2, 0x2f, 0x48, 0x2c, 0x2d, 0x4e, 0x8d, 0x2f, 0x2e, 0x49,
	0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0xc9, 0xea, 0x81, 0x65, 0xa5,
	0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xc2, 0xfa, 0x20, 0x16, 0x44, 0x85, 0x92, 0x01, 0x17, 0x57,
	0x00, 0x48, 0x5b, 0x30, 0x48, 0x97, 0x90, 0x12, 0x17, 0x1b, 0xd8, 0x90, 0x14, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x0e, 0x27, 0xae, 0x57, 0xf7, 0xe4, 0xa1, 0x22, 0x41, 0x50, 0xda, 0xc9, 0xee, 0xc4,
	0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1,
	0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x54, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xb3, 0x4a, 0x32, 0x53, 0x8b, 0x32, 0xf5, 0xc1, 0xae, 0xab, 0x80,
	0xba, 0xaf, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x6c, 0xb1, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x33, 0x04, 0xef, 0x2b, 0xba, 0x00, 0x00, 0x00,
}

func (m *PauseState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPauseState(dAtA []byte, offset int, v uint64) int {
	offset -= sovPauseState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PauseState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paused {
		n += 2
	}
	return n
}

func sovPauseState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPauseState(x uint64) (n int) {
	return sovPauseState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PauseState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPauseState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPauseState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPauseState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPauseState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPauseState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPauseState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPauseState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPauseState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPauseState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPauseState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPauseState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPauseState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPauseState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPauseState = fmt.Errorf("proto: unexpected end of group")
)
